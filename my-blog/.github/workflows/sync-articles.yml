name: Sync Markdown to HTML
on:
  push:
    paths:
      - 'my-blog/markdown/_posts/​**​'  # 只监控MD文件变化
      - '!my-blog/markdown/README.md' # 忽略无关文件

jobs:
  convert:
    runs-on: ubuntu-latest
    steps:
      # 步骤1：检出代码
      - uses: actions/checkout@v4
      
      # 步骤2：设置环境（自动创建缺失目录）
      - name: 初始化目录
        run: |
          mkdir -p my-blog/articles/post
          mkdir -p my-blog/markdown/_posts

      # 步骤3：处理Markdown（核心逻辑）
      - name: 转换文章
        run: |
          cd my-blog
          
          # 计算起始ID（兼容空目录）
          NEXT_ID=$(( $(ls -1q articles/post | wc -l) + 1 ))
          
          # 遍历所有Markdown文件
          for MD in markdown/_posts/*.md; do
            [ -e "$MD" ] || continue  # 跳过空目录
            
            # 提取元数据
            TITLE=$(grep -m1 'title:' "$MD" | cut -d'"' -f2 || basename "$MD" .md | sed 's/^[0-9]\+-//')
            DATE=$(grep -m1 'date:' "$MD" | cut -d'"' -f2 || date +'%Y-%m-%d')

            # 生成HTML路径（严格匹配你的/my-blog/结构）
            HTML_PATH="articles/post/${NEXT_ID}.html"
            
            # 生成HTML内容（保留你的原样式）
            echo "<!DOCTYPE html>
            <html>
              <head>
                <title>$TITLE</title>
                <link rel=\"stylesheet\" href=\"/my-blog/static/css/blog.css\">
              </head>
              <body>
                $(pandoc "$MD")
              </body>
            </html>" > "$HTML_PATH"

            # 更新articles1.js（追加模式）
            echo "{ title: \"$TITLE\", 
                   link: \"/my-blog/articles/post/${NEXT_ID}.html\", 
                   lastModified: \"${DATE} 12:00:00\" }," >> articles/articles1.js

            ((NEXT_ID++))
          done

      # 步骤4：提交更改
      - name: 自动提交
        run: |
          cd my-blog
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add articles/
          git commit -m "自动同步文章 [skip ci]" || exit 0
          git push